import streamlit as st
import random
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# 1. Introducci√≥n - T√≠tulo
def slide_intro():
    st.title("üì∞ ComuCode: La Comunicaci√≥n en Acci√≥n - El Virreinato de la Nueva Granada")
    st.header("üó£Ô∏è Introducci√≥n")
    st.write("""
    Bienvenidos a **ComuCode**, una experiencia interactiva que muestra c√≥mo la **programaci√≥n** puede ayudarnos a entender los **temas hist√≥ricos** de la **comunicaci√≥n** en el **Virreinato de la Nueva Granada** entre **1810 y 1816**.
    
    A trav√©s de este proyecto, exploraremos c√≥mo los **peri√≥dicos mon√°rquicos** y **realistas** influyeron en la **opini√≥n p√∫blica** durante el conflicto independentista, ayudando a **defender el orden colonial** y contrarrestar las ideas **independentistas**.
    
    ¬°Prep√°rate para interactuar con la historia y entender c√≥mo la **programaci√≥n** puede ilustrar conceptos tan fundamentales como la construcci√≥n de la **esfera p√∫blica**!
    """)

# 2. Interactividad: Opini√≥n P√∫blica en 1810
def slide_slider_opinion():
    st.header("üìä Simulaci√≥n de la Opini√≥n P√∫blica en 1810")
    st.write("""
    Usaremos un **slider interactivo** para mostrar c√≥mo la **opini√≥n p√∫blica** cambiaba entre los defensores del **orden colonial** y los **independentistas** a lo largo de los a√±os, seg√∫n la influencia de los **peri√≥dicos mon√°rquicos**.
    
    **Desliza para ver c√≥mo cambiaba la percepci√≥n p√∫blica de los diferentes temas en los peri√≥dicos**.
    """)

    # Usamos el slider para manipular la "opini√≥n p√∫blica" en base al a√±o o la influencia
    year = st.slider("Selecciona un a√±o (1810 - 1816)", 1810, 1816, 1810)
    
    # Suponiendo que los peri√≥dicos mon√°rquicos aumentaban su influencia a medida que la guerra avanzaba
    opinion_colonial = np.clip(100 - (year - 1810) * 5, 0, 100)  # Entre 100 y 0
    opinion_independentista = 100 - opinion_colonial
    
    # Visualizamos la opini√≥n p√∫blica usando gr√°ficos de barras
    opinion_data = {
        'Orden Colonial': opinion_colonial,
        'Independencia': opinion_independentista
    }
    df = pd.DataFrame(list(opinion_data.items()), columns=["Opini√≥n", "Porcentaje"])

    # Mostrar la gr√°fica de barras
    st.bar_chart(df.set_index("Opini√≥n"))
    
    st.write(f"En el a√±o {year}, la percepci√≥n p√∫blica era: ")
    st.write(f"**{opinion_colonial}%** a favor del orden colonial y **{opinion_independentista}%** a favor de la independencia.")

# 3. Gr√°fica Interactiva: Distribuci√≥n de Temas en los Peri√≥dicos
def slide_grafica_temporal():
    st.header("üìà Evoluci√≥n de los Temas en los Peri√≥dicos Mon√°rquicos")
    st.write("""
    Ahora vamos a ver c√≥mo la **distribuci√≥n de los temas** en los **peri√≥dicos mon√°rquicos** cambiaba a lo largo del tiempo, en relaci√≥n con la **guerra**, **pol√≠tica** y **sociedad**.
    
    Desliza para ver c√≥mo los temas ganaban o perd√≠an relevancia durante los a√±os de la **guerra** y el **conflicto**.
    """)

    # Slider para seleccionar el a√±o
    year = st.slider("Selecciona el a√±o para ver la distribuci√≥n de temas", 1810, 1816, 1810)
    
    # Crear una distribuci√≥n de temas dependiendo del a√±o
    if year <= 1812:
        guerra = 40 + random.randint(0, 20)  # Aumento gradual en guerra
        politica = 30
        sociedad = 20
        economia = 10
    elif year <= 1814:
        guerra = 60
        politica = 25
        sociedad = 10
        economia = 5
    else:
        guerra = 80
        politica = 15
        sociedad = 3
        economia = 2
    
    # Graficamos la distribuci√≥n de los temas en los peri√≥dicos
    temas = ['Guerra', 'Pol√≠tica', 'Sociedad', 'Econom√≠a']
    distribucion = [guerra, politica, sociedad, economia]
    
    plt.figure(figsize=(10, 6))
    plt.bar(temas, distribucion, color=['red', 'green', 'blue', 'orange'])
    plt.title(f'Distribuci√≥n de Temas en los Peri√≥dicos en {year}')
    plt.xlabel('Secciones del Peri√≥dico')
    plt.ylabel('Porcentaje de Contenido')
    st.pyplot(plt)

# 4. Conclusi√≥n Final y Reflexi√≥n
def slide_conclusion():
    st.header("üìù Conclusi√≥n")
    st.write("""
    En esta presentaci√≥n interactiva, hemos explorado c√≥mo los **peri√≥dicos mon√°rquicos** y **realistas** ayudaron a moldear la **opini√≥n p√∫blica** en el **Virreinato de la Nueva Granada** durante los a√±os cr√≠ticos de la independencia (1810-1816).
    
    Al usar **herramientas de programaci√≥n**, pudimos visualizar c√≥mo la **comunicaci√≥n masiva** influ√≠a en las decisiones pol√≠ticas y sociales de la √©poca. Adem√°s, al integrar **Big Data** y conceptos como **PredPol**, hemos hecho un paralelo entre el pasado y el impacto de los **algoritmos modernos** en la **esfera p√∫blica**.
    
    Reflexionamos sobre c√≥mo los **medios conservadores** y **discursos contrarrevolucionarios** siguen teniendo una influencia notable en la **opini√≥n p√∫blica** hoy en d√≠a, similar a los peri√≥dicos de la √©poca.
    """)

# 2. Herramientas de Historia Social de la Comunicaci√≥n: Fuentes y Metodolog√≠as
def slide_hsc_metodologia():
    st.header("üìú Herramientas Metodol√≥gicas en la Historia Social de la Comunicaci√≥n")
    st.write("""
    La **Historia Social de la Comunicaci√≥n** se enfoca en c√≥mo los **intercambios simb√≥licos** (medios, discursos, prensa) **configuran** y **moldean la realidad social**. Usaremos este enfoque para analizar c√≥mo los peri√≥dicos de la √©poca ayudaban a **defender el orden colonial** y consolidar el poder realista en el **Virreinato de la Nueva Granada**.
    
    **Herramientas clave**:
    - **Fuentes**: Peri√≥dicos, literatura, fuentes orales, objetos.
    - **Criterios de Periodizaci√≥n**: Analizar c√≥mo los **medios** influ√≠an en las **etapas cr√≠ticas** del proceso de independencia.
    - **Divulgaci√≥n**: C√≥mo se comunicaban y se entend√≠an las ideas entre los diferentes sectores sociales.
    """)

    # Agregar herramientas de visualizaci√≥n
    st.write("Veamos c√≥mo la **comunicaci√≥n** de la √©poca se basaba en **intercambios simb√≥licos** que reforzaban el poder realista.")

    # Gr√°fico de distribuci√≥n de fuentes y tipos de medios en la √©poca
    fuentes = ['Prensa Realista', 'Literatura', 'Fuentes Orales', 'Objetos Hist√≥ricos']
    cantidad = [70, 15, 10, 5]

    plt.figure(figsize=(10, 6))
    plt.pie(cantidad, labels=fuentes, autopct='%1.1f%%', startangle=140, colors=['blue', 'green', 'orange', 'red'])
    plt.title('Distribuci√≥n de Fuentes en la Historia Social de la Comunicaci√≥n (Virreinato)')
    st.pyplot(plt)

# 3. Los Peri√≥dicos Mon√°rquicos y la Defensa del Orden Colonial
def slide_periodicos_monarquicos():
    st.header("üìú Los Peri√≥dicos Mon√°rquicos en la Contrarrevoluci√≥n")
    st.write("""
    Los **peri√≥dicos mon√°rquicos** fueron fundamentales en la **defensa del orden colonial**. A trav√©s de sus publicaciones, **moldeaban la opini√≥n p√∫blica** para promover una narrativa que defendiera la **legitimidad del gobierno colonial** y presentara la **independencia** como una **amenaza** al orden social.
    
    Vamos a ver c√≥mo los peri√≥dicos de la √©poca distribu√≠an el contenido relacionado con los **temores de la independencia**, **el miedo a la anarqu√≠a**, y la **justificaci√≥n de la intervenci√≥n de la corona**.
    """)

    # Crear una gr√°fica de barras con distribuci√≥n de temas
    secciones = ['Guerra', 'Pol√≠tica', 'Sociedad', 'Econom√≠a']
    porcentaje = [35, 25, 20, 20]

    plt.figure(figsize=(10, 6))
    plt.bar(secciones, porcentaje, color=['red', 'green', 'blue', 'orange'])
    plt.title('Distribuci√≥n de Temas en Peri√≥dicos Mon√°rquicos (1810-1816)')
    plt.xlabel('Secciones del Peri√≥dico')
    plt.ylabel('Porcentaje de Contenido')
    st.pyplot(plt)

# 2. Secci√≥n de Criminalizaci√≥n de la Pobreza con Simulaci√≥n de PredPol
def slide_criminalizacion():
    st.header("üî¥ Criminalizaci√≥n de la Pobreza y PredPol")
    st.write("""
    En esta secci√≥n, exploramos c√≥mo los modelos predictivos, como **PredPol**, tienden a concentrarse en los **barrios pobres**, generando un **bucle de retroalimentaci√≥n**.
    
    **M√°s vigilancia genera m√°s arrestos**, justificando a√∫n m√°s vigilancia en el futuro. Este fen√≥meno puede perpetuar la **criminalizaci√≥n** de ciertas comunidades, especialmente las m√°s vulnerables.
    
    Para entender mejor este fen√≥meno, vamos a ejecutar una simulaci√≥n del modelo de **PredPol**: m√°s vigilancia genera m√°s arrestos, y esos arrestos justifican m√°s vigilancia.
    """)

    # Simulaci√≥n de PredPol: Bucle de retroalimentaci√≥n
    barrio_vigilado = st.radio("¬øQuieres aumentar la vigilancia en un barrio pobre?", ('S√≠', 'No'))
    arrestos = 0

    if barrio_vigilado == 'S√≠':
        arrestos = random.randint(5, 15)  # N√∫mero de arrestos iniciales
        st.write(f"üî¥ Se han realizado **{arrestos} arrestos** en el barrio vigilado.")
        st.write("Esto justifica m√°s presencia policial üöî.")
        
        # Simulaci√≥n de retroalimentaci√≥n con un nuevo aumento de arrestos
        decision = st.radio("¬øDeseas aumentar la vigilancia de nuevo?", ('S√≠', 'No'))
        if decision == 'S√≠':
            arrestos += random.randint(5, 15)  # Aumento en los arrestos
            st.write(f"üöî Ahora se han realizado **{arrestos} arrestos**. El bucle de retroalimentaci√≥n contin√∫a...")
        else:
            st.write("üîµ Decidiste no aumentar la vigilancia, pero los arrestos iniciales ya generaron datos que refuerzan la percepci√≥n de criminalidad.")
    else:
        st.write("üü¢ No aumentaste la vigilancia, el n√∫mero de arrestos en la zona se mantiene bajo.")

    # Visualizaci√≥n de c√≥mo cambia la vigilancia
    vigilancia_data = {'Vigilancia Baja': 100 - arrestos, 'Vigilancia Alta': arrestos}
    df = pd.DataFrame(list(vigilancia_data.items()), columns=["Estado de Vigilancia", "Cantidad"])

    st.bar_chart(df.set_index("Estado de Vigilancia"))

    # Relaci√≥n con el presente: Conexi√≥n con PredPol y tecnolog√≠as modernas
    st.write("""
    **Reflexi√≥n moderna:**  
    Este fen√≥meno de **vigilancia predictiva** no es algo nuevo. Hoy en d√≠a, **algoritmos como PredPol** se utilizan en muchas ciudades del mundo para predecir patrones de criminalidad. Sin embargo, como en los ejemplos hist√≥ricos, estas **tecnolog√≠as** **perpet√∫an sesgos**, especialmente en comunidades marginadas, lo que puede generar un c√≠rculo vicioso de **vigilancia y criminalizaci√≥n**.
    
    **PredPol** se basa en el an√°lisis de datos hist√≥ricos sobre cr√≠menes para predecir d√≥nde ocurrir√°n futuros delitos. Sin embargo, este modelo ha sido criticado por **reforzar estereotipos raciales** y **discriminar a ciertas comunidades**, especialmente aquellas que ya est√°n sobrevigiladas.
    
    As√≠ como los peri√≥dicos **realistas** de la √©poca ayudaron a **moldear la percepci√≥n p√∫blica** a favor del orden colonial, hoy en d√≠a, **PredPol** y otros modelos similares **moldean la percepci√≥n de criminalidad** y perpet√∫an la **discriminaci√≥n estructural**.
    """)

# Funci√≥n principal para ejecutar la aplicaci√≥n de Streamlit
def run():
    st.sidebar.title("üìù Navegar entre Secciones")
    option = st.sidebar.selectbox("Elige la secci√≥n que deseas ver:", 
                                  ("üì∞ Introducci√≥n", 
                                   "üìú Herramientas Metodol√≥gicas", 
                                   "üì∞ Los Peri√≥dicos Mon√°rquicos", 
                                   "üìä Simulaci√≥n de Opini√≥n P√∫blica", 
                                   "üìà Evoluci√≥n de los Temas en los Peri√≥dicos", 
                                   "üî¥ Criminalizaci√≥n de la Pobreza y PredPol", 
                                   "üìù Conclusi√≥n"))
    if option == "Introducci√≥n":
        slide_intro()
    elif option == "Herramientas Metodol√≥gicas":
        slide_hsc_metodologia()
    elif option == "Los Peri√≥dicos Mon√°rquicos":
        slide_periodicos_monarquicos()
    elif option == "Simulaci√≥n de Opini√≥n P√∫blica":
        slide_slider_opinion()
    elif option == "Evoluci√≥n de los Temas en los Peri√≥dicos":
        slide_grafica_temporal()
    elif option == "¬øPor qu√© es importante entenderlo hoy en d√≠a?":
        slide_criminalizacion()
    else:
        slide_conclusion()

if __name__ == "__main__":
    run()
